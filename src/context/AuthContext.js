import React, { createContext, useState, useEffect, useContext } from 'react';
import UserService from '../services/userService';

export const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(null);

  // –ö–ª—é—á–∏ –¥–ª—è localStorage
  const USER_CACHE_KEY = 'auth_user_cache';
  const LAST_UPDATE_KEY = 'auth_last_update';
  const CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
  const loadUserFromCache = () => {
    try {
      const cachedUser = localStorage.getItem(USER_CACHE_KEY);
      const cachedLastUpdate = localStorage.getItem(LAST_UPDATE_KEY);
      
      if (cachedUser && cachedLastUpdate) {
        const lastUpdateTime = parseInt(cachedLastUpdate);
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
        if (now - lastUpdateTime < CACHE_DURATION) {
          const userData = JSON.parse(cachedUser);
          setUser(userData);
          setLastUpdate(lastUpdateTime);
          return userData;
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
    return null;
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
  const saveUserToCache = (userData) => {
    try {
      if (userData) {
        localStorage.setItem(USER_CACHE_KEY, JSON.stringify(userData));
        localStorage.setItem(LAST_UPDATE_KEY, Date.now().toString());
      } else {
        localStorage.removeItem(USER_CACHE_KEY);
        localStorage.removeItem(LAST_UPDATE_KEY);
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadUserProfile = async () => {
    try {
      setLoading(true);
      const response = await UserService.getProfile();
      
      if (response.data) {
        const userData = {
          id: response.data.id,
          username: response.data.username,
          role: response.data.role,
          email: response.data.email,
          // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        };
        
        setUser(userData);
        saveUserToCache(userData);
        setLastUpdate(Date.now());
        return userData;
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 –∏–ª–∏ 404, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (error.response?.status === 401 || error.response?.status === 404) {
        setUser(null);
        saveUserToCache(null);
        return null;
      }
      
      // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserProfile = async () => {
    try {
      await loadUserProfile();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  };

  // –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = async () => {
    try {
      await UserService.logout();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    } finally {
      setUser(null);
      saveUserToCache(null);
      setLastUpdate(null);
    }
  };

  // –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
  const login = async () => {
    try {
      const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
      const loginUrl = `${baseURL}/user/login`;
      window.location.href = loginUrl;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      throw error;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
        const cachedUser = loadUserFromCache();
        
        if (cachedUser) {
          // –ï—Å–ª–∏ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          setLoading(false);
        } else {
          // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
          await loadUserProfile();
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  useEffect(() => {
    if (!user) return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

    const interval = setInterval(() => {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      refreshUserProfile();
    }, CACHE_DURATION);

    return () => clearInterval(interval);
  }, [user]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const isAuthenticated = !!user;
  const isAdmin = user?.role === 'admin';
  const isUser = user?.role === 'user';

  return (
    <AuthContext.Provider value={{
      user,
      loading,
      isAuthenticated,
      isAdmin,
      isUser,
      login,
      logout,
      refreshUserProfile,
      lastUpdate
    }}>
      {children}
    </AuthContext.Provider>
  );
}; 