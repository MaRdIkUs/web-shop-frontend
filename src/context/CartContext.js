import React, { createContext, useState, useEffect } from 'react';
import cartService from '../services/cartService';

export const CartContext = createContext();

export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [networkError, setNetworkError] = useState(false);
  const [isLoaded, setIsLoaded] = useState(false);

  // –ö–ª—é—á–∏ –¥–ª—è localStorage
  const CART_CACHE_KEY = 'cart_items_cache';
  const CART_LAST_UPDATE_KEY = 'cart_last_update';
  const CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∫—ç—à–∞
  const loadCartFromCache = () => {
    try {
      const cachedCart = localStorage.getItem(CART_CACHE_KEY);
      const cachedLastUpdate = localStorage.getItem(CART_LAST_UPDATE_KEY);
      
      if (cachedCart && cachedLastUpdate) {
        const lastUpdateTime = parseInt(cachedLastUpdate);
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
        if (now - lastUpdateTime < CACHE_DURATION) {
          const cartData = JSON.parse(cachedCart);
          setCartItems(cartData);
          setIsLoaded(true);
          return cartData;
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
    return null;
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ –∫—ç—à
  const saveCartToCache = (cartData) => {
    try {
      if (cartData) {
        localStorage.setItem(CART_CACHE_KEY, JSON.stringify(cartData));
        localStorage.setItem(CART_LAST_UPDATE_KEY, Date.now().toString());
      } else {
        localStorage.removeItem(CART_CACHE_KEY);
        localStorage.removeItem(CART_LAST_UPDATE_KEY);
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∫–æ—Ä–∑–∏–Ω—ã:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadCart = async () => {
    try {
      setLoading(true);
      setNetworkError(false);
      const response = await cartService.getCart();
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ response.data —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      const items = Array.isArray(response.data) ? response.data : [];
      setCartItems(items);
      saveCartToCache(items);
      setIsLoaded(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
      if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
        setNetworkError(true);
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        // –ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        setCartItems([]);
      } else if (error.response?.status === 404) {
        // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é
        console.warn('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é');
        setCartItems([]);
        saveCartToCache([]);
      } else if (error.response?.status === 401 || error.response?.status === 302) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');
        setCartItems([]);
        saveCartToCache(null);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const loginUrl = `${baseURL}/user/login`;
        window.location.href = loginUrl;
      } else {
        // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        setCartItems([]);
      }
      setIsLoaded(true);
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = async (productId, quantity = 1) => {
    try {
      setNetworkError(false);
      await cartService.addToCart(productId, quantity);
      await loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      
      if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
        setNetworkError(true);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      }
      
      if (error.response?.status === 401 || error.response?.status === 302) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const loginUrl = `${baseURL}/user/login`;
        window.location.href = loginUrl;
        return;
      }
      
      throw error;
    }
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const updateCartItem = async (itemId, quantity) => {
    try {
      setNetworkError(false);
      await cartService.updateCartItem(itemId, quantity);
      await loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error);
      
      if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
        setNetworkError(true);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      }
      
      if (error.response?.status === 401 || error.response?.status === 302) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const loginUrl = `${baseURL}/user/login`;
        window.location.href = loginUrl;
        return;
      }
      
      throw error;
    }
  };

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = async (itemId) => {
    try {
      setNetworkError(false);
      await cartService.removeFromCart(itemId);
      await loadCart(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      
      if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
        setNetworkError(true);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      }
      
      if (error.response?.status === 401 || error.response?.status === 302) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const loginUrl = `${baseURL}/user/login`;
        window.location.href = loginUrl;
        return;
      }
      
      throw error;
    }
  };

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  const clearCart = async () => {
    try {
      setNetworkError(false);
      for (const item of cartItems) {
        await cartService.removeFromCart(item.id);
      }
      setCartItems([]);
      saveCartToCache([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      
      if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
        setNetworkError(true);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
      }
      
      if (error.response?.status === 401 || error.response?.status === 302) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const baseURL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';
        const loginUrl = `${baseURL}/user/login`;
        window.location.href = loginUrl;
        return;
      }
      
      throw error;
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
  const getCartItemsCount = () => {
    return cartItems.length;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cachedCart = loadCartFromCache();
    if (!cachedCart) {
      // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      loadCart();
    }
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  useEffect(() => {
    const interval = setInterval(() => {
      console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã...');
      loadCart();
    }, CACHE_DURATION);

    return () => clearInterval(interval);
  }, []);

  return (
    <CartContext.Provider value={{ 
      cartItems, 
      loading,
      networkError,
      isLoaded,
      addToCart, 
      updateCartItem,
      removeFromCart, 
      clearCart,
      loadCart,
      getCartItemsCount
    }}>
      {children}
    </CartContext.Provider>
  );
};
