import { NavLink } from 'react-router-dom';
import React, { useEffect, useState } from 'react';
import { useCart } from '../hooks/useCart';
import { useAuth } from '../context/AuthContext';
import categoryService from '../services/categoryService';

const Navbar = () => {
  const { cartItems, loading: cartLoading, networkError: cartNetworkError, loadCart, getCartItemsCount, isLoaded: cartIsLoaded } = useCart();
  const { user, loading: authLoading, isAuthenticated, login, logout } = useAuth();
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCategories, setShowCategories] = useState(false);
  const [loginLoading, setLoginLoading] = useState(false);
  const [networkError, setNetworkError] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadCategories = async () => {
      try {
        setLoading(true);
        setNetworkError(false);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesResponse = await categoryService.getAll();
        setCategories(categoriesResponse.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', error);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        if (error.code === 'ERR_NETWORK' || error.message === 'Network Error') {
          setNetworkError(true);
          console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.');
        } else if (error.response?.status === 404) {
          console.warn('API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –í–æ–∑–º–æ–∂–Ω–æ, API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å.');
        } else if (error.response?.status >= 500) {
          console.warn('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5xx). API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—à–∏–±–∫–∏.');
        } else {
          console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.status, error.message);
        }
      } finally {
        setLoading(false);
      }
    };

    loadCategories();
  }, []);

  const handleLogin = async () => {
    try {
      setLoginLoading(true);
      console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞...');
      await login();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setLoginLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∫–ª–∏–∫–µ
  const handleCartClick = () => {
    if (!cartIsLoaded) {
      console.log('üõí –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ...');
      loadCart();
    }
  };

  const getApiStatusMessage = () => {
    if (networkError) {
      return '‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }
    if (cartNetworkError) {
      return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã';
    }
    return null;
  };

  return (
    <nav className="bg-gray-800 p-4 text-white">
      <div className="container mx-auto flex justify-between items-center">
        <div className="flex space-x-4 items-center">
          <NavLink to="/" className="hover:underline font-semibold">
            –ú–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
          </NavLink>
          
          {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          <div className="relative">
            <button
              onMouseEnter={() => setShowCategories(true)}
              onMouseLeave={() => setShowCategories(false)}
              className="hover:underline flex items-center space-x-1"
            >
              <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {showCategories && (
              <div
                onMouseEnter={() => setShowCategories(true)}
                onMouseLeave={() => setShowCategories(false)}
                className="absolute top-full left-0 mt-1 w-64 bg-white text-gray-800 rounded-lg shadow-lg z-50"
              >
                {loading ? (
                  <div className="p-3 text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
                ) : networkError ? (
                  <div className="p-3 text-sm text-red-600">
                    –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
                  </div>
                ) : (
                  <div className="py-2">
                    {categories.map(category => (
                      <NavLink
                        key={category.id}
                        to={`/category/${category.id}`}
                        className="block px-4 py-2 hover:bg-gray-100 text-sm"
                        onClick={() => setShowCategories(false)}
                      >
                        {category.name}
                      </NavLink>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        
        <div className="flex space-x-4 items-center">
          {getApiStatusMessage() && (
            <div className="text-yellow-300 text-sm">
              {getApiStatusMessage()}
            </div>
          )}
          
          {authLoading ? (
            <span className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          ) : isAuthenticated ? (
            <>
              <span className="text-sm">–ü—Ä–∏–≤–µ—Ç, {user?.username}</span>
              {user?.role && (
                <span className="text-xs bg-blue-600 px-2 py-1 rounded">
                  {user.role}
                </span>
              )}
              <button 
                onClick={handleLogout}
                className="text-sm hover:underline"
              >
                –í—ã–π—Ç–∏
              </button>
            </>
          ) : (
            <button 
              onClick={handleLogin}
              disabled={loginLoading || networkError}
              className="text-sm hover:underline disabled:opacity-50"
            >
              {loginLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          )}
          
          {/* –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ—Å—Ç—É–ø–∞ */}
          <NavLink 
            to="/cart" 
            className="hover:underline flex items-center space-x-1"
            onClick={handleCartClick}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4" />
            </svg>
            <span>
              –ö–æ—Ä–∑–∏–Ω–∞ ({getCartItemsCount()})
              {cartLoading && <span className="ml-1">...</span>}
            </span>
          </NavLink>

          {isAuthenticated && user?.role?.toLowerCase() === 'admin' && (
            <NavLink to="/admin" className="hover:underline font-semibold text-yellow-300">
              –ê–¥–º–∏–Ω
            </NavLink>
          )}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;